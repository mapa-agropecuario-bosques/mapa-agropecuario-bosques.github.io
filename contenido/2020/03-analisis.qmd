# Análisis y visualización {.unnumbered}

En esta sección se propone un conjunto de ejercicios de análisis y visualización de datos.

## Exploración y descarga del repositorio en GitHub

1. Navegue al repositorio en GitHub del proyecto del mapa de uso agropecuario y bosques 2020 en:  
[https://github.com/mapa-agropecuario-bosques/2020](https://github.com/mapa-agropecuario-bosques/2020).
2. Observe la ubicación y el contenido de los directorios de:
    - Datos.
    - Programas.
    - Salidas.
3. Descargue el contenido del repositorio en formato ZIP de [https://github.com/mapa-agropecuario-bosques/2020/archive/refs/heads/main.zip](https://github.com/mapa-agropecuario-bosques/2020/archive/refs/heads/main.zip) y descomprímalo en su computadora (el archivo ZIP tiene un tamaño aproximado de 400 MB y el directorio que se genera al descomprimirlo tiene un tamaño aproximado de 1.35 GB). Puede renombrar el directorio y colocarlo en cualquier ubicación de su disco en donde tenga derechos de lectura y escritura.

## Visualización del mapa en QGIS

1. Abra y visualice en [QGIS](https://qgis.org/) el mapa final, el cual se encuentra en la siguiente ruta del directorio del proyecto:  
`salidas/uso-agropecuario-bosques-2020-reclasificado-comprimido.tif`
2. Instale la extensión QuickMapServices y agregue una capa base (ej. OpenStreetMap).
3. Modifique el archivo de estilos `salidas/uso-agropecuario-bosques-2020-reclasificado-comprimido.qml` para cambiar los colores y otras propiedades del mapa. Aplique los cambios en la sección **Simbología** de la interfaz de QGIS.

## Análisis con R

### Instalación

1. Descargue el interpretador de R y el entorno de desarrollo integrado RStudio del siguiente enlace:  
[RStudio Desktop](https://posit.co/download/rstudio-desktop/).

### Creación de un documento Quarto

1. Abra en RStudio, con **File - Open Project...**, el proyecto del mapa en `2020.Rproj`.
2. Instale las bibliotecas necesarias con el siguiente comando en la consola:
`install.packages(c("here", "tidyverse", "plotly", "DT", "sf", "terra", "leaflet"))`
3. Cree un nuevo documento Quarto con las opciones de menú **File - New File - Quarto Document...**. Guárdelo con el nombre `analisis.qmd` en el directorio raíz.

### Generación de una tabla interactiva

1. Agregue a `analisis.qmd` el contenido del archivo [analisis.txt](https://raw.githubusercontent.com/mapa-agropecuario-bosques/mapa-agropecuario-bosques.github.io/refs/heads/main/contenido/2020/analisis.txt) (debe añadir las tildes).
2. Ejecute los bloques de código R uno por uno con el botón **Play** (es el triángulo que está arriba y a la derecha de cada bloque).
3. Ejecute el documento con el botón **Render**.

### Generación de un gráfico de barras interactivo

1. Agregue un bloque de código R al documento con el siguiente contenido:

```md
#| label: grafico-barras
#| code-fold: show
#| code-summary: "Generación de gráfico de barras interactivo"

# Gráfico de barras
areas |>
  plot_ly(
    x = ~reorder(clase, -ha),
    y = ~ha,
    type = 'bar'
  ) |>
    layout(
      title = "Área por clase",
      xaxis = list(title = "Clase"),
      yaxis = list(title = "Ha")
    )
```

2. Agregue al documento un gráfico similar al anterior que muestre las áreas en km2.

### Recorte del raster con base en un polígono

1. Copie al directorio principal del proyecto el archivo [cartago.gpkg](https://github.com/mapa-agropecuario-bosques/mapa-agropecuario-bosques.github.io/blob/main/contenido/2020/datos/cartago.gpkg).

2. Visualice la capa raster de todo el país y la capa vectorial de Cartago en QGIS.

3. Agregue un bloque de código R al documento con el siguiente contenido para recortar el raster de todo el país con base en el polígono de Cartago:

```md
#| label: recorte-raster
#| code-fold: true
#| code-summary: "Recorte de raster"

# Leer el archivo vectorial en formato sf
cartago_sf <- st_read("cartago.gpkg")

# Convertir el objeto sf a SpatVector de terra
cartago_vect <- vect(cartago_sf)

# Recortar el raster con base en el objeto SpatVector
raster_crop <- crop(raster_agropecuario_bosques, cartago_vect)

# Aplicar la máscara para conservar solo los valores dentro del polígono
raster_cartago <- mask(raster_crop, cartago_vect)

# Guardar el resultado en un archivo raster
writeRaster(raster_cartago, "cartago.tif", overwrite = TRUE)
```

4. Genere una tabla y un gráfico de barras que muestren las áreas de cada clase, solo para la provincia de Cartago, y agréguelos al documento Quarto.